#version 330

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 worldMatrix;

layout (location = 0) in vec3 inPosition;
layout (location = 1) in vec2 textureCoords;
layout (location = 2) in vec3 normal;

smooth out vec3 thePosition; // Interpolate position among fragments
smooth out vec2 UVcoords;
smooth out vec4 EyeCoordinates;
smooth out vec3 outNormal;

out vec3 lightVector;

uniform mat4 scaleMatrix;

void main()
{
	vec4 positionScaled = scaleMatrix * vec4(inPosition, 1.0);
	gl_Position = projectionMatrix * viewMatrix * worldMatrix * positionScaled;
	thePosition = (worldMatrix * positionScaled).xyz;

	UVcoords = textureCoords;

	EyeCoordinates = normalize(viewMatrix * worldMatrix * vec4(inPosition, 1.f));

	lightVector = ((-1 * viewMatrix * worldMatrix) * positionScaled).xyz;

	outNormal = (transpose(inverse(viewMatrix * worldMatrix)) * vec4(normal, 1.f)).xyz;

}